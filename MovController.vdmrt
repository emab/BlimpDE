class MovController

instance variables
	motorLeft: SimpleActuator;
	motorRight: SimpleActuator;
	camController: CamController;
	pPid: PID;
	tPid: PID;
	target: Target;
	step: real:= 0;
	countY:nat:= 0;
	countR:nat:= 0;
	countX:nat:= 0;
	
	
	
types
PID :: pGain : real
			 dGain : real
			 dState : real;

Target :: X : real
					Y : real;
					
operations

	public MovController : SimpleActuator * SimpleActuator * CamController ==> MovController
	MovController(motorL, motorR, camCont) == 
	(
	  motorLeft:= motorL; 
 		motorRight:= motorR;
 		camController:= camCont;
		pPid:= mk_PID(0.8,90,0);
 		tPid:= mk_PID(0.4,40,0);
 		target:= mk_Target(-1,1.5);
  );
	
  private control_loop : () ==> ()
	control_loop() == cycles(0) (
		dcl pos:CamController`EstimatedPos:= camController.process();
		dcl coords:CamController`Coord:=pos.Coord;
		IO`printf("CALCULATED THETA:::::::::::::::::::::: %s\n",[pos.T]);
		
		if step = 3 then
		(
			dcl targetT:real:=1;
			dcl driveT:real:= normalise(updateDirectionPID(targetT - pos.T, pos.T));
			IO`printf("TARGET THETA::::::@@@@@@@@@@:::::::::::::::: %s @@@@@@@@@ CALC POS: %s\n",[targetT,pos.T]);
			motorLeft.setValue(-driveT);
			motorRight.setValue(driveT);
		);
		
		if step = 0 then
		(
			dcl driveY:real:= normalise(updatePositionPID(target.Y - coords.Y, coords.Y));
			motorLeft.setValue(driveY);
			motorRight.setValue(driveY);
			
			if (coords.Y < target.Y + 0.001 and coords.Y > target.Y - 0.001) then
				countY:= countY + 1;
			if countY >= 20 then
			(
				step:= 1;
				countY:= 0;
			);
		);
		
		if step = 1 then
		(
			dcl rotate:real;
			dcl driveR:real;
			
			if (target.X = 0) then
				step:= 3
			else if (target.X < 0) then
				rotate:=MATH`pi/2
			else if (target.X > 0) then
				rotate:=1.5 * MATH`pi;
				
			driveR:= normalise(updateDirectionPID(rotate - pos.T, pos.T));
			motorLeft.setValue(-driveR);
			motorRight.setValue(driveR);
			if (pos.T < rotate + 0.01 and pos.T > rotate -0.01) then
				countR:= countR+1;
			if countR = 20 then
			(
				step:=2;
				countR:=0;
			);
		);
		
		if step = 2 then
		(
		dcl driveX:real:= normalise(updatePositionPID(target.X - coords.X, coords.X));
			motorLeft.setValue(-driveX);
			motorRight.setValue(-driveX);
			
			if (coords.X < target.X + 0.001 and coords.X > target.X - 0.001) then
				countX:= countX + 1;
			if countX = 10 then
			(
				step:= 4;
				countX:= 0;
			);
		);
  );
  
  private targetAngle : real * real ==> real
  targetAngle(X, Y) ==
  (
  	return MATH`cos(Y/X);
  );
  
  private distance : real * real ==> real
  distance(X, Y) ==
  (
  	dcl a:real:= (X*X + Y*Y);
  	return MATH`sqrt(a);
  );
  
   	private angle2 : nat * nat * nat * nat ==> real
 	angle2(x, y, camX, camY) ==
 	(
 		if (x > camX and y > camY) then
			return MATH`atan((x-camX)/(y-camY))
		else if (x > camX and y < camY) then
			return 0.5*MATH`pi + MATH`atan((camY-y)/(x-camX))
		else if (x < camX and y > camY) then
			return 1.5*MATH`pi + MATH`atan((camY-y)/(camX-x))
		else if (x < camX and y < camY) then
			return MATH`pi + MATH`atan((camX-x)/(camY-y))
		else if (x = camX and y > camY) then
			return 0
		else if (x = camX and y < camY) then
			return MATH`pi
		else if (y = camY and x > camX) then
			return 0.5*MATH`pi
		else if (y = camY and x < camX) then
			return 1.5*MATH`pi
		else
			return 0
 	);
 	
 	private angle : real * real * real * real ==> real
 	angle(x, y, camX, camY) ==
 	(
 		if (x > camX and y > camY) then
			return 1.5*MATH`pi + abs (MATH`atan((camY-y)/(camX-x)))
		else if (x > camX and y < camY) then
			return MATH`pi + abs (MATH`atan((camX-x)/(y-camY)))
		else if (x < camX and y > camY) then
			return abs (MATH`atan((x-camX)/(y-camY)))
		else if (x < camX and y < camY) then
			return MATH`pi/2 + abs (MATH`atan((camY-y)/(camX-x)))
		else if (x = camX and y > camY) then
			return 0
		else if (x = camX and y < camY) then
			return MATH`pi
		else if (y = camY and x > camX) then
			return 1.5*MATH`pi
		else if (y = camY and x < camX) then
			return MATH`pi/2
		else
			return 0
 	);
  private updatePositionPID : real * real ==> real
  updatePositionPID(pidError, position) ==
  (
  	dcl pTerm:real:= pidError * pPid.pGain;
  	
  	dcl dTerm:real:= pPid.dGain * (position - pPid.dState);

  	dcl output:real;
  	
		pPid.dState:= position;
		output:= (pTerm - dTerm);
		return output;
  );
  
  private updateDirectionPID : real * real ==> real
  updateDirectionPID(pidError, position) ==
  (
  	dcl pTerm:real:= pidError * tPid.pGain;
  	
  	dcl dTerm:real:= tPid.dGain * (position - tPid.dState);

  	dcl output:real;
		tPid.dState:= position;
		output:= (pTerm - dTerm);
		return output;
  );
  
  private normalise : real ==> real
  normalise(input) ==
  (
  	if (input > 1) then
  		return 1
  	else if (input < -1) then
  		return -1
  	else
  		return input;	
  );
	
thread

	periodic(20E6,0,0,0)(control_loop);	 
		 
end MovController
