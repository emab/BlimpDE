class CamController

instance variables
camera: Camera;
movController: MovController;
	
types
	ObjectID = token;
	ObjectDatum ::	xCoord : real
									yCoord : real
									radius : real;
	Objects = map ObjectID to ObjectDatum;
	
	Coord :: X : real
					 Y : real
					 Z : real;
	
	Lengths :: l1: real
						 l2: real
						 l3: real;

values
	calcX = 0;
	calcY = 0;
	calcZ = 0;
	calcTheta = 0;						

operations

	public CamController : Camera * MovController ==> CamController
	CamController(c, mov) == 
	(
  	camera:= c;
  	movController:= mov;
  );

   private control_loop : () ==> ()
	control_loop() == cycles(0) (
		
		if (calcX = 0) then
		(
			return;
		);
   );
   
   private GetDistance : real * int * Camera ==> real
   GetDistance(objR, pixelWidth, cam) ==
   (
   	return objR / MATH`tan((((c.getxFOV()*180/MATH`pi)*pixelWidth)/cam.getxResolution())/2);
   );
   
   private Trilaterate : Coord * Coord * Coord * Lengths ==> Coord
   Trilaterate(p1, p2, p3, length) ==
   (
   		dcl x1:real:= p1.X;
   		dcl y1:real:= p1.Y;
   		dcl z1:real:= p1.Z;
   		
   		dcl x2:real:= p2.X;
   		dcl y2:real:= p2.Y;
   		dcl z2:real:= p2.Z;
   	
   		dcl x3:real:= p3.X;
   		dcl y3:real:= p3.Y;
   		dcl z3:real:= p3.Z;
   		
   		dcl L1:real:= length.l1;
   		dcl L2:real:= length.l2;
   		dcl L3:real:= length.l3;
   		
   		dcl LB1:real:= MATH`sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1) + (z2 - z1) * (z2 - z1));
   		dcl LB2:real:= MATH`sqrt((x3 - x2) * (x3 - x2) + (y3 - y2) * (y3 - y2) + (z3 - z2) * (z3 - z2));
   		dcl LB3:real:= MATH`sqrt((x1 - x3) * (x1 - x3) + (y1 - y3) * (y1 - y3) + (z1 - z3) * (z1 - z3));
   		
   		dcl X:real:= (L1*L1  - L2*L2  + LB1*LB1)/(2*LB1 );
   		dcl C1:real:= MATH`sqrt(L1*L1 - X*X);
   		dcl XB:real:= (LB3*LB3 - LB2*LB2 + LB1*LB1 )/(2*LB1);
   		dcl CB:real:= MATH`sqrt(LB3*LB3 - XB* XB );
   		dcl D1:real:= MATH`sqrt(C1*C1+(XB - X)*(XB - X));
   		dcl Y:real:= (D1*D1 - L3*L3  + CB*CB  )/(2*CB );
   		dcl Z:real:= MATH`sqrt(C1 * C1 - Y * Y);
   		
   		dcl Xx:real:= (x2-x1);
   		dcl Xy:real:= (y2-y1);
   		dcl Xz:real:= (z2-z1);
   		dcl Xl:real:= MATH`sqrt(Xx*Xx+Xy*Xy+Xz*Xz);
   		
   		dcl t:real:= -((x1-x3)*(x2-x1)+(y1-y3)*(y2-y1)+(z1-z3)*(z2-z1))/(LB1*LB1);
   		dcl Yx:real:= (x1+(x2-x1)*t-x3);
      dcl Yy:real:= (y1+(y2-y1)*t-y3);
      dcl Yz:real:= (z1+(z2-z1)*t-z3);
      dcl Yl:real:= MATH`sqrt(Yx*Yx+Yy*Yy+Yz*Yz);
        
      dcl Zx:real:= (Xy * Yz - Xz * Yy);
      dcl Zy:real:= (Xz * Yx - Xx * Yz);
      dcl Zz:real:= (Xx * Yy - Xy * Yx);  
        
   		Xx:= Xx / Xl;
   		Xy:= Xy / Xl;
   		Xz:= Xz / Xl;
   		
			Yx:= - (Yx/Yl);
      Yy:= - (Yy/Yl);
      Yz:= - (Yz/Yl);
      
      return mk_Coord((x1 + X * Xx + Y * Yx + Z * Zx),(y1 + X * Xy + Y * Yy + Z * Zy),(z1 + X * Xz + Y * Yz + Z * Zz));
   );

thread

	periodic(10E6,0,0,0)(control_loop);	 
		 
end CamController
